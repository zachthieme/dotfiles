#!/usr/bin/zsh
# TODO: update me to use bat and be portable across mac/linux
function gff () {
  if [ -z "$1" ]; then
    echo "\033[31mError:\033[0m Please provide a file path."
    echo "Usage: git_file_preview <file>"
    return 1
  fi

  local file="$1"

  # Get the full relative path of the file from the repository root
  local repo_root=$(git rev-parse --show-toplevel)
  local rel_file="${file#$repo_root/}"

  echo "\033[34mSearching Git history for:\033[0m $rel_file"

  # Use fzf to interactively search and preview file history
  local selected_commit
  selected_commit=$(git log --oneline --follow -- "$rel_file" | \
    fzf --preview "git show {1}:$rel_file | cat " \
        --preview-window=right:70%:wrap --height=80% --border)

  if [ -z "$selected_commit" ]; then
    echo "\033[33mNo commit selected.\033[0m"
    return 0
  fi

  local commit_hash
  commit_hash=$(echo "$selected_commit" | awk '{print $1}')

  echo "\033[34mSelected Commit:\033[0m $commit_hash"
  echo "\033[34mFile Content Previewed Above.\033[0m"
}

# kill command using fzf
function k() {
  ps aux | 
  fzf --height 40% \
      --layout=reverse \
      --header-lines=1 \
      --prompt="Select process to kill: " \
      --preview 'echo {}' \
      --preview-window up:3:hidden:wrap \
      --bind 'F2:toggle-preview' |
  awk '{print $2}' |
  xargs -r bash -c '
      if ! kill "$1" 2>/dev/null; then
          echo "Regular kill failed. Attempting with sudo..."
          sudo kill "$1" || echo "Failed to kill process $1" >&2
      fi
  ' --
}

function logg() {
    git log | fzf --ansi --no-sort \
        --preview 'echo {} | grep -o "[a-f0-9]\{7\}" | head -1 | xargs -I % git show % --color=always' \
        --preview-window=right:50%:wrap --height 100% \
        --bind 'enter:execute(echo {} | grep -o "[a-f0-9]\{7\}" | head -1 | xargs -I % sh -c "git show % | nvim -c \"setlocal buftype=nofile bufhidden=wipe noswapfile nowrap\" -c \"nnoremap <buffer> q :q!<CR>\" -")' \
        --bind 'ctrl-e:execute(echo {} | grep -o "[a-f0-9]\{7\}" | head -1 | xargs -I % sh -c "gh browse %")' \
}

function mkdd ()
{
 mkdir -p ${1:+$1$prefix_separator}"$(date +%F)"; }

# Search for a string in files using rg and fzf, then open selected files with nvim.
function _fif_common() {
  local ignore_case_flag="$1"
  local search_term="$2"
  local chezmoi_flag="$3"

  if [[ -z "$search_term" ]]; then
    echo "Usage: _fif_common <ignore_case_flag> <search_term> [--chezmoi]"
    return 1
  fi

  # Set up preview command for fzf
  local preview_cmd="rg $ignore_case_flag --pretty --context 10 '$search_term' {}"

  # Get matching files using rg and fzf
  local files
  IFS=$'\n' files=($(rg --files-with-matches $ignore_case_flag --no-messages "$search_term" | \
    fzf-tmux +m --preview="$preview_cmd" --multi --select-1 --exit-0)) || return 1

  # Handle no selection
  if [[ ${#files[@]} -eq 0 ]]; then
    echo "No files selected."
    return 0
  fi

  # Resolve real paths and open files in nvim or chezmoi
  local resolved_files=()
  for file in "${files[@]}"; do
    resolved_files+=("$(realpath "$file")")
  done

  if [[ "$chezmoi_flag" == "--chezmoi" ]]; then
    cm edit "${resolved_files[@]}"
  else
    nvim "${resolved_files[@]}"
  fi
}

# Wrapper function for case-sensitive search
function fifs() {
    _fif_common "" "$@"
}

# Wrapper function for editing with chezmoi search
function fifc() {
    _fif_common "" "$@" "--chezmoi"
}

# Wrapper function for case-insensitive search
function fif() {
    _fif_common "--ignore-case" "$@"
}

# function to run yazi
function y() {
  local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
  yazi "$@" --cwd-file="$tmp"
  if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
    builtin cd -- "$cwd"
  fi
  rm -f -- "$tmp"
}

# open a customized version of nvim
vv() {
  # Assumes all configs exist in directories named ~/.config/nvim-*
  {{- if and (not (eq .chezmoi.osRelease nil)) (eq (index .chezmoi.osRelease "id" | default "unknown") "debian") }}
  local config=$(fdfind --max-depth 1 --glob 'nvim-*' ~/.config | fzf --prompt="Neovim Configs > " --height=~50% --layout=reverse --border --exit-0)
  {{- end }} 
  {{- if eq .chezmoi.os "darwin" }}
  local config=$(fd --max-depth 1 --glob 'nvim-*' ~/.config | fzf --prompt="Neovim Configs > " --height=~50% --layout=reverse --border --exit-0)
  {{- end }} 
  # If I exit fzf without selecting a config, don't open Neovim
  [[ -z $config ]] && echo "No config selected" && return
 
  # Open Neovim with the selected config
  NVIM_APPNAME=$(basename $config) nvim $@
}
