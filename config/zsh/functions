#!/usr/bin/zsh
# Interactive Git file history explorer
# Displays the commit history for a specific file and allows previewing changes
# Use this to see how a file evolved over time
function gff () {
  if [ -z "$1" ]; then
    echo "\033[31mError:\033[0m Please provide a file path."
    echo "Usage: git_file_preview <file>"
    return 1
  fi

  local file="$1"

  # Get the full relative path of the file from the repository root
  local repo_root=$(git rev-parse --show-toplevel)
  local rel_file="${file#$repo_root/}"

  echo "\033[34mSearching Git history for:\033[0m $rel_file"

  # Use fzf to interactively search and preview file history
  local selected_commit
  selected_commit=$(git log --oneline --follow -- "$rel_file" | \
    fzf --preview "git show {1}:$rel_file | cat " \
        --preview-window=right:70%:wrap --height=80% --border)

  if [ -z "$selected_commit" ]; then
    echo "\033[33mNo commit selected.\033[0m"
    return 0
  fi

  local commit_hash
  commit_hash=$(echo "$selected_commit" | awk '{print $1}')

  echo "\033[34mSelected Commit:\033[0m $commit_hash"
  echo "\033[34mFile Content Previewed Above.\033[0m"
}

# Interactive process killer using fzf
# Lists all running processes and allows selecting one to kill
# Automatically tries with sudo if regular kill fails
function k() {
  ps aux | 
  fzf --height 40% \
      --layout=reverse \
      --header-lines=1 \
      --prompt="Select process to kill: " \
      --preview 'echo {}' \
      --preview-window up:3:hidden:wrap \
      --bind 'F2:toggle-preview' |
  awk '{print $2}' |
  xargs -r bash -c '
      if ! kill "$1" 2>/dev/null; then
          echo "Regular kill failed. Attempting with sudo..."
          sudo kill "$1" || echo "Failed to kill process $1" >&2
      fi
  ' --
}

# Interactive Git log explorer with previews
# Shows git log with commit previews and allows viewing full commits in Neovim
# Use enter to view selected commit in Neovim, ctrl-e to open in GitHub
function logg() {
    git log | fzf --ansi --no-sort \
        --preview 'echo {} | grep -o "[a-f0-9]\{7\}" | head -1 | xargs -I % git show % --color=always' \
        --preview-window=right:50%:wrap --height 100% \
        --bind 'enter:execute(echo {} | grep -o "[a-f0-9]\{7\}" | head -1 | xargs -I % sh -c "git show % | nvim -c \"setlocal buftype=nofile bufhidden=wipe noswapfile nowrap\" -c \"nnoremap <buffer> q :q!<CR>\" -")' \
        --bind 'ctrl-e:execute(echo {} | grep -o "[a-f0-9]\{7\}" | head -1 | xargs -I % sh -c "gh browse %")' \
}

# Create a directory with today's date
# Creates a directory with the current date (YYYY-MM-DD) format
# Optionally prefixes the directory name if an argument is provided
function mkdd ()
{
 mkdir -p ${1:+$1$prefix_separator}"$(date +%F)"; }

# Common function for searching text in files (internal helper)
# Used by fif, fifs, and fifc to search for text patterns in files
# Handles the common logic for all file searching functions
function _fif_common() {
  local ignore_case_flag="$1"
  local search_term="$2"
  local chezmoi_flag="$3"

  if [[ -z "$search_term" ]]; then
    echo "Usage: _fif_common <ignore_case_flag> <search_term> [--chezmoi]"
    return 1
  fi

  # Set up preview command for fzf
  local preview_cmd="rg $ignore_case_flag --pretty --context 10 '$search_term' {}"

  # Get matching files using rg and fzf
  local files
  IFS=$'\n' files=($(rg --files-with-matches $ignore_case_flag --no-messages "$search_term" | \
    fzf-tmux +m --preview="$preview_cmd" --multi --select-1 --exit-0)) || return 1

  # Handle no selection
  if [[ ${#files[@]} -eq 0 ]]; then
    echo "No files selected."
    return 0
  fi

  # Resolve real paths and open files in nvim or chezmoi
  local resolved_files=()
  for file in "${files[@]}"; do
    resolved_files+=("$(realpath "$file")")
  done

  if [[ "$chezmoi_flag" == "--chezmoi" ]]; then
    cm edit "${resolved_files[@]}"
  else
    nvim "${resolved_files[@]}"
  fi
}

# Case-sensitive search for text in files
# Searches for exact matches of the given pattern and opens matches in Neovim
# Usage: fifs "search pattern"
function fifs() {
    _fif_common "" "$@"
}

# Case-sensitive search for text in chezmoi-managed files
# Searches for exact matches and opens matching files with chezmoi edit
# Usage: fifc "search pattern"
function fifc() {
    _fif_common "" "$@" "--chezmoi"
}

# Case-insensitive search for text in files
# Searches for patterns ignoring case and opens matches in Neovim
# Usage: fif "search pattern"
function fif() {
    _fif_common "--ignore-case" "$@"
}

# Run yazi file manager with directory tracking
# Opens the yazi file manager and changes the current directory
# when you exit yazi to match where you were in the file manager
function y() {
  local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
  yazi "$@" --cwd-file="$tmp"
  if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
    builtin cd -- "$cwd"
  fi
  rm -f -- "$tmp"
}

# Select and open a Neovim config variant
# Lists all available Neovim configurations (from ~/.config/nvim-*)
# and opens Neovim with the selected configuration
vv() {
  # Assumes all configs exist in directories named ~/.config/nvim-*
  local config=$(fd --max-depth 1 --glob 'nvim-*' ~/.config | fzf --prompt="Neovim Configs > " --height=~50% --layout=reverse --border --exit-0)
  
  # If I exit fzf without selecting a config, don't open Neovim
  [[ -z $config ]] && echo "No config selected" && return
 
  # Open Neovim with the selected config
  NVIM_APPNAME=$(basename $config) nvim $@
}

# Clean up the Nix store by removing unused packages
# Runs nix-collect-garbage with the -d flag to delete old generations
# This frees up disk space by removing packages no longer needed
nix-cleanup() {
  echo "Collecting garbage from the Nix store..."
  sudo nix-collect-garbage -d
  echo "Garbage collection complete!"
}

# List all available shell functions with descriptions
# Parses this functions file and displays each function with its description
# The output is color-coded for better readability
fns() {
  echo "\033[1;34m=== Available Shell Functions ===\033[0m"
  echo ""
  
  # Parse this functions file to extract function names and their comments
  local current_file="${ZDOTDIR:-$HOME}/.config/zsh/functions"
  
  # Use grep and awk to extract function names and their preceding comments
  grep -E "^[[:space:]]*#|^[[:space:]]*function [a-zA-Z0-9_-]+\(\)|^[a-zA-Z0-9_-]+\(\)" "$current_file" | 
  awk '
  BEGIN { comment = ""; name = ""; }
  /^[[:space:]]*#/ { 
    if (comment == "") {
      comment = $0;
    } else {
      comment = comment "\\n" $0;
    }
  }
  /^[[:space:]]*function [a-zA-Z0-9_-]+\(\)|^[a-zA-Z0-9_-]+\(\)/ { 
    # Extract function name
    gsub(/[[:space:]]*function |\(\)/, "", $0);
    name = $0;
    printf "\033[1;32m%s\033[0m\n", name;
    if (comment != "") {
      # Remove leading # and spaces from comment
      gsub(/^[[:space:]]*#[[:space:]]*/, "", comment);
      # Print comment with proper indentation
      split(comment, lines, "\\\\n");
      for (i in lines) {
        gsub(/^[[:space:]]*#[[:space:]]*/, "", lines[i]);
        printf "  \033[3;33m%s\033[0m\n", lines[i];
      }
    } else {
      printf "  \033[3;33mNo description available\033[0m\n";
    }
    printf "\n";
    comment = "";
  }
  '

  echo "\033[1;34m===========================\033[0m"
}
