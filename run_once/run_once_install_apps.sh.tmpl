#!/bin/bash

# Generate the log file name with ISO 8601 datetime
LOG_FILE="$HOME/cm_install_$(date +"%Y-%m-%dT%H:%M:%S").log"

# Function to log messages
log_message() {
    local message="$1"
    local current_time=$(date +"%Y-%m-%d %H:%M:%S")
    echo "[$current_time] $message" | tee -a "$LOG_FILE"
}

# function to enable logging of commands that run
run_command() {
    local command="$*"
    log_message "Executing: $command"
    
    # Execute the command using eval
    output=$(eval "$command" 2>&1)
    exit_code=$?

    # Log the command output
    log_message "Output: $output"

    # Log success or failure based on the exit code
    if [ $exit_code -eq 0 ]; then
        log_message "Command succeeded."
    else
        log_message "Command failed with exit code $exit_code."
    fi

    # Return the exit code to allow for error handling
    return $exit_code
}

# INSTALL: any tool that can be deployed via a package manager across all distro's and have a new enough version
INSTALL=( bat curl gh git gettext jq mosh pandoc pass ripgrep tmux btop podman wget zsh )

# POP: any tools that need to be installed specefically for PopOS. 
POP=( openssh-server )

# DEBIAN_DEV: developer tools that are required for other installs to work
DEBIAN_DEV=( autoconf automake cmake python3-libtmux doxygen fd-find g++ gettext libtool libtool-bin ninja-build  pkg-config protobuf-compiler python3-launchpadlib software-properties-common unzip )
# id = pop
{{- if and (not (eq .chezmoi.osRelease nil)) (eq (index .chezmoi.osRelease "id" | default "unknown") "pop") }}

log_message "########################################################"
log_message "                Update PopOS distro's"
log_message "########################################################"

sudo apt update && sudo apt upgrade -y  
echo ${POP[@]} | xargs sudo apt install -y

{{- end}}

{{- if and (not (eq .chezmoi.osRelease nil)) (eq (index .chezmoi.osRelease "id" | default "unknown") "debian" "pop") }}

log_message "########################################################"
log_message "                Update Debian distro's"
log_message "########################################################"

sudo apt update && sudo apt upgrade -y  

echo ${INSTALL[@]} | xargs sudo apt install -y 
echo ${DEBIAN[@]} | xargs sudo apt install -y

{{- end}}

log_message "  "
log_message "  "
log_message "########################################################"
log_message "           Non-Package Manager Installs All OS"
log_message "########################################################"
log_message "  "
log_message "  "

# install cargo and rust
if ! command -v cargo &> /dev/null
then
  log_message "installing cargo"
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path
fi

# install TPM for TMUX
[ ! -d $HOME/.tmux/plugins ] && log_message "installing tpm" && git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

{{- if eq .chezmoi.os "darwin" }}
log_message "  "
log_message "  "
log_message "########################################################"
log_message "                  Starting Mac Install"
log_message "########################################################"
log_message "  "
log_message "  "

log_message "foo"
 if ! command -v brew &> /dev/null
 then
   log_message "installing Homebrew"
   /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
 fi
log_message "bar"

{{- end }}


{{- if and (not (eq .chezmoi.osRelease nil)) (eq (index .chezmoi.osRelease "id" | default "unknown") "debian" "pop") }}

log_message "  "
log_message "  "
log_message "########################################################"
log_message "                Debian Post Install"
log_message "########################################################"
log_message "  "
log_message "  "
log_message "checking if nvim is the default editor"

if [[ ! $(update-alternatives --query editor | grep 'Value:' | awk '{print $2}') == *nvim* ]]; then
  log_message "setting nvim to default editor"
  sudo update-alternatives --install /usr/bin/editor editor $(which nvim) 60
  sudo update-alternatives --config editor
else
  log_message "nvim is default editor"
fi

{{- end}}
